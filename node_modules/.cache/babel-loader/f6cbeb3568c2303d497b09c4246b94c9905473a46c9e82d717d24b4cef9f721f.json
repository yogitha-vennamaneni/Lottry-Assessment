{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yogis\\\\Source\\\\Lottry\\\\Lottry-Assessment\\\\src\\\\Providers\\\\GeneratorProvider.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, createContext, useEffect } from \"react\";\nimport generateUniqueRandomNumber from \"../Functions/GenerateUniqueRandomNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst maximumValue = 80;\nconst defaultBallsValue = new Array(maximumValue + 1);\nfor (let index = 0; index < maximumValue + 1; index++) {\n  defaultBallsValue[index] = false;\n}\nconst defaultValues = {\n  maxBallsCount: 20,\n  maximumValue: maximumValue,\n  ticketLength: 10,\n  balls: [],\n  ballsDrawn: defaultBallsValue,\n  isBallsDrawing: false,\n  isBallRoatating: false,\n  recentBall: 0\n};\nconst GeneratorContext = /*#__PURE__*/createContext(defaultValues);\nfunction GeneratorProvider(props) {\n  _s();\n  const [balls, setBalls] = useState(Array());\n  const [recentBall, setRecentBall] = useState(0);\n  const [ballcount, setBallsCount] = useState(0);\n  const [ballsDrawn, setBallsDrawn] = useState(defaultBallsValue);\n  const [isBallsDrawing, setIsBallsDrawing] = useState(defaultValues.isBallsDrawing);\n  const [isBallRoatating, setIsBallRotating] = useState(false);\n  const [isReDraw, setIsReDraw] = useState(false);\n  const [reset, setReset] = useState(false);\n  let interval = null;\n  let cancelInterval = () => {};\n  const drawBall = () => {\n    let ball = generateUniqueRandomNumber(balls, defaultValues.maximumValue);\n    setRecentBall(ball);\n    let list = [...balls, ball].sort((a, b) => a - b);\n    let drawList = [...ballsDrawn];\n    drawList[ball] = true;\n    setBalls(list);\n    setBallsDrawn(drawList);\n    setBallsCount(ballcount + 1);\n  };\n  const drawBalls = () => {\n    setReset(false);\n    if (ballcount == defaultValues.maxBallsCount) {\n      setIsReDraw(true);\n      resetBalls();\n    }\n    setIsBallsDrawing(true);\n    cancelInterval = triggerBallDraw();\n  };\n  const triggerBallDraw = () => {\n    if (ballcount < defaultValues.maxBallsCount) {\n      setIsBallRotating(true);\n      interval = setTimeout(() => {\n        setIsReDraw(false);\n        drawBall();\n        setIsBallRotating(false);\n      }, 2000);\n    } else if (ballcount == defaultValues.maxBallsCount) {\n      setIsBallsDrawing(false);\n      setRecentBall(0);\n      clearTimeout(interval);\n    }\n    return () => {\n      clearTimeout(interval);\n    };\n  };\n  useEffect(() => {\n    if (ballcount >= 1 || isReDraw) {\n      if (isReDraw) {\n        setIsBallsDrawing(true);\n      }\n      if (!reset) {\n        cancelInterval = triggerBallDraw();\n      }\n    }\n  }, [balls, isReDraw]);\n  useEffect(() => {\n    let setInterval = setTimeout(() => {\n      setRecentBall(0);\n      clearTimeout(setInterval);\n    }, 1000);\n  }, [isBallRoatating]);\n  const resetBalls = () => {\n    setBallsCount(0);\n    setBalls([]);\n    setBallsDrawn(defaultBallsValue);\n    setReset(true);\n    setIsBallsDrawing(false);\n    setRecentBall(0);\n    // cancelInterval();\n  };\n\n  const contextValue = {\n    maximumValue: defaultValues.maximumValue,\n    ticketLength: defaultValues.ticketLength,\n    maxBallsCount: defaultValues.maxBallsCount,\n    balls: balls,\n    ballsDrawn: ballsDrawn,\n    drawBalls: drawBalls,\n    resetBalls: resetBalls,\n    isBallsDrawing: isBallsDrawing,\n    isBallRoatating: isBallRoatating,\n    recentBall: recentBall\n  };\n  return /*#__PURE__*/_jsxDEV(GeneratorContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 12\n  }, this);\n}\n_s(GeneratorProvider, \"MDo/p7H5fqsCoChXyzUU+RyZFk0=\");\n_c = GeneratorProvider;\nexport { GeneratorProvider, GeneratorContext };\nvar _c;\n$RefreshReg$(_c, \"GeneratorProvider\");","map":{"version":3,"names":["React","useState","createContext","useEffect","generateUniqueRandomNumber","jsxDEV","_jsxDEV","maximumValue","defaultBallsValue","Array","index","defaultValues","maxBallsCount","ticketLength","balls","ballsDrawn","isBallsDrawing","isBallRoatating","recentBall","GeneratorContext","GeneratorProvider","props","_s","setBalls","setRecentBall","ballcount","setBallsCount","setBallsDrawn","setIsBallsDrawing","setIsBallRotating","isReDraw","setIsReDraw","reset","setReset","interval","cancelInterval","drawBall","ball","list","sort","a","b","drawList","drawBalls","resetBalls","triggerBallDraw","setTimeout","clearTimeout","setInterval","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yogis/Source/Lottry/Lottry-Assessment/src/Providers/GeneratorProvider.tsx"],"sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\r\nimport generateUniqueRandomNumber from \"../Functions/GenerateUniqueRandomNumber\";\r\n\r\ntype generatorContextType = {\r\n    maximumValue: number,\r\n    ticketLength: number,\r\n    maxBallsCount: number,\r\n    balls: number[],\r\n    ballsDrawn: boolean[],\r\n    drawBalls?: () => void,\r\n    resetBalls?: () => void,\r\n    isBallsDrawing: boolean,\r\n    isBallRoatating: boolean,\r\n    recentBall: number,\r\n}\r\nconst maximumValue = 80;\r\nconst defaultBallsValue : Array<boolean> = new Array<boolean>(maximumValue + 1);\r\n\r\nfor (let index = 0; index < maximumValue + 1; index++) {\r\n    defaultBallsValue[index] = false;\r\n}\r\n\r\nconst defaultValues : generatorContextType = {\r\n    maxBallsCount: 20,\r\n    maximumValue: maximumValue,\r\n    ticketLength: 10,\r\n    balls: [],\r\n    ballsDrawn: defaultBallsValue,\r\n    isBallsDrawing: false,\r\n    isBallRoatating: false,\r\n    recentBall: 0\r\n};\r\nconst GeneratorContext = createContext(defaultValues);\r\n\r\nfunction GeneratorProvider(props: any) { \r\n    const [balls, setBalls] = useState(Array<number>());\r\n    const [ recentBall, setRecentBall] = useState(0);\r\n    const [ballcount, setBallsCount] = useState(0);\r\n    const [ballsDrawn, setBallsDrawn] = useState(defaultBallsValue);\r\n    const [isBallsDrawing, setIsBallsDrawing] = useState(defaultValues.isBallsDrawing);\r\n    const [isBallRoatating, setIsBallRotating] = useState(false);\r\n    const [isReDraw, setIsReDraw] = useState(false);\r\n    const [reset, setReset] = useState(false);\r\n    let interval: any = null;\r\n    let cancelInterval: any = () => {};\r\n\r\n    const drawBall = () => {\r\n        let ball: number = generateUniqueRandomNumber(balls, defaultValues.maximumValue);\r\n        setRecentBall(ball);\r\n        let list: number[] = [...balls, ball].sort((a, b) => a - b);\r\n        let drawList = [...ballsDrawn];\r\n        drawList[ball] = true;\r\n        setBalls(list);\r\n        setBallsDrawn(drawList);\r\n        setBallsCount(ballcount + 1);\r\n    }\r\n  \r\n    const drawBalls = () => {\r\n        setReset(false);\r\n        if(ballcount == defaultValues.maxBallsCount) {\r\n            setIsReDraw(true);\r\n            resetBalls();\r\n        }\r\n        setIsBallsDrawing(true);\r\n        cancelInterval = triggerBallDraw();\r\n    }\r\n\r\n    const triggerBallDraw = () => {\r\n        if (ballcount < defaultValues.maxBallsCount) {\r\n            setIsBallRotating(true);\r\n            interval = setTimeout(() => {\r\n                setIsReDraw(false);\r\n                drawBall();\r\n                setIsBallRotating(false);\r\n            }, 2000);\r\n        } else if (ballcount == defaultValues.maxBallsCount) {\r\n            setIsBallsDrawing(false);\r\n            setRecentBall(0);\r\n            clearTimeout(interval);\r\n        }\r\n        return () => { clearTimeout(interval) }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(ballcount >= 1 || isReDraw) {\r\n            if(isReDraw) {                \r\n                setIsBallsDrawing(true);\r\n            }\r\n            if(!reset) {\r\n                cancelInterval = triggerBallDraw();\r\n            }\r\n        }\r\n    }, [balls, isReDraw]);\r\n\r\n    useEffect(() => {\r\n        let setInterval = setTimeout(() => {\r\n            setRecentBall(0);\r\n            clearTimeout(setInterval);\r\n        }, 1000);\r\n    }, [isBallRoatating])\r\n\r\n    const resetBalls = () => {\r\n        setBallsCount(0);\r\n        setBalls([]);\r\n        setBallsDrawn(defaultBallsValue);\r\n        setReset(true);\r\n        setIsBallsDrawing(false);\r\n        setRecentBall(0);\r\n        // cancelInterval();\r\n    }\r\n\r\n    const contextValue: generatorContextType = { \r\n        maximumValue: defaultValues.maximumValue,\r\n        ticketLength: defaultValues.ticketLength,\r\n        maxBallsCount: defaultValues.maxBallsCount,\r\n        balls: balls,\r\n        ballsDrawn: ballsDrawn,\r\n        drawBalls: drawBalls,\r\n        resetBalls: resetBalls,\r\n        isBallsDrawing: isBallsDrawing,\r\n        isBallRoatating: isBallRoatating,\r\n        recentBall: recentBall,\r\n    };    \r\n    \r\n    return <GeneratorContext.Provider value={contextValue}>\r\n        {props.children}\r\n    </GeneratorContext.Provider>\r\n}\r\n\r\nexport {GeneratorProvider, GeneratorContext};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}